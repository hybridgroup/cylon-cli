#!/usr/bin/env node

"use strict";

var dest;

var path = require("path"),
    fs = require("fs");

var mkdirp = require("mkdirp");

var pkg = require("../package.json");

var args = process.argv.slice(2),
    versions = pkg.versions,
    log = console.log,
    error = console.error;

function createModule(name, out) {
  var packagejson = {
    name: name,
    description: "Your package description",
    version: "0.0.0",
    main: "lib/index.js",
    devDependencies: {
      chai: versions.chai,
      mocha: versions.mocha,
      sinon: versions.sinon,
      "sinon-chai": versions["sinon-chai"]
    },
    dependencies: {
      cylon: versions.cylon,
    }
  };

  mkdir(out, function() {
    var lib = out + "/lib",
        spec = out + "/spec";

    copy("gitignore", ".gitignore");
    copy("eslintrc", ".eslintrc");

    copy("Makefile");

    write(out + "/package.json", JSON.stringify(packagejson, null, 2));

    mkdir(lib, function() {
      copy("lib/index.js");
      copy("lib/adaptor.js");
      copy("lib/driver.js");
    });

    mkdir(spec, function() {
      var specLib = spec + "/lib";

      copy("spec/helper.js");
      copy("spec/eslintrc", "spec/.eslintrc");

      mkdir(specLib, function() {
        copy("spec/lib/index.spec.js");
        copy("spec/lib/adaptor.spec.js");
        copy("spec/lib/driver.spec.js");
      });
    });
  });
}

function main() {
  var force = false;

  if (include(args, ["-v", "--version"])) {
    log(pkg.version);
    return;
  }

  if (include(args, ["-h", "--help"])) {
    log([
      "",
      "  Usage: cylon [dir]",
      "",
      "  Options:",
      "",
      "    -h, --help       output usage information",
      "    -v, --version    output the version number",
      "    -f, --force      force on non-empty directory",
      ""
    ].join("\n"));
    return;
  }

  if (include(args, ["-f", "--force"])) {
    args = reject(args, function(a) { return a === "-f" || a === "--force"; });
    force = true;
  }

  dest = args.shift() || ".";

  var name = path.basename(path.resolve(dest)),
      empty = isEmpty(dest);

  if (empty || force) {
    createModule(name, dest);
  } else {
    confirm("destination not empty, continue? [y/n]", function(ok) {
      if (ok) {
        process.stdin.destroy();
        createModule(name, dest);
      } else {
        error("aborting");
        process.exit(1);
      }
    });
  }
}

main();

// writes a file to disk
function write(out, content) {
  fs.writeFileSync(out, content);
  log("   \x1b[34mcreate\x1b[0m : " + out);
}

function mkdir(out, fn) {
  mkdirp(out, function(err) {
    if (err) {
      throw err;
    }

    log("   \x1b[34mcreate\x1b[0m : " + out);

    if (typeof fn === "function") {
      fn();
    }
  });
}

function copy(src, end) {
  var from = path.join(__dirname, "..", "template", src),
      to = dest + "/" + (end || src);
  write(to, fs.readFileSync(from, "utf-8"));
}

// prompt for user confirmation
function confirm(prompt, callback) {
  var rl = require("readline").createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(prompt, function(input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

// checks if a directory is empty
function isEmpty(dir) {
  try {
    var files = fs.readdirSync(dir);
    return !files || !files.length;
  } catch (e) {
    if (e.code !== "ENOENT") {
      throw e;
    }

    return true;
  }
}

// check if an array includes a value (or values)
function include(arr, items) {
  if (Array.isArray(items)) {
    return items.some(function(x) { return ~arr.indexOf(x); });
  }

  return !!~arr.indexOf(items);
}

function reject(array, iterator) {
  return array.filter(function(item) {
    return !iterator.call(null, item);
  });
}
